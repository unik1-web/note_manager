# Этап2_Финальное_Юнин_Константин.
# Задание: Работа с несколькими заметками
import re
from datetime import date, datetime, timedelta


note_ = (
    "имя пользователя: ", "заголовок заметки: ", "описание заметки: ",
    "статус заметки (новая, в процессе, выполнено. По умолчанию: новая): ",
    "дату создания заметки или нажмите Enter для ввода текущей даты: ",
    "дату истечения заметки (дедлайн, по умолчанию - неделя от текущей даты): "
)           # Список элементов заметки для ввода
note_end = (
    "Имя: ", "Заголовок: ", "Описание: ",
    "Статус: ","Дата создания: ", "Дедлайн: ",
    "Идентификатор ID: "
)           # Список элементов заметки для вывода
status_ = ("новая", "в процессе", "выполнено")      # Список статусов заметки для ввода
phrase = {
    0: "Вы ввели текст без заглавной буквы, поэтому повторите ввод!",
    1: "Вы ввели заголовок, который уже вводили ранее, поэтому повторите ввод заголовка заметки!",
    2: "Вы ввели несколько заголовков, поэтому повторите ввод заголовка заметки!",
    3: "Вы неправильно ввели статус заметки, повторите ввод!",
    4: "Неверный формат даты. Пожалуйста, убедитесь, что дата введена правильно.",
    5: "Дата дедлайна не может быть раньше даты создания заметки, повторите ввод!",
    6: "Хотите удалить эту заметку? (1да/2нет):  ",
    7: "Хотите добавить ещё одну заметку? (1да/2нет):  ",
    8: "Пожалуйста повторите ввод правильно: либо 1, либо 2!"
}          # Словарь фраз для вывода
output_tab = (
    "\t", "\t", "\t",
    "\t", "\t", "\t", "\t"
)          # Список табуляции элементов заметки для вывода
note_keys = (
    "username", "title", "content", "status",
    "created_date", "issue_date", "ID"
)          # Кортеж ключей словаря заметки
note = []          # Список данных текущей заметки
note_states = {}         # Словарь заметки
note_list = []        # Список словарей заметки


def data_entry_():       # Функция ввода данных
    global e
    copy_ = {}       # Копия словаря заметки
    e = -1        # Индекс заметок пользователя
    while True:
        e += 1
        j = 0        # Индекс списка для словаря заметок
        while True:
            if j == 6:
                note.append(id(e))
                break       # Выход при заполнении списка словаря заметок
            data_ = input("Введите " + note_[j])
            if data_ == "" and j in [0, 1, 2]:
                print(phrase[0])
                continue
            else:
                note.append(data_)          # Внесение данных пользователя в список данных текущей заметки
                if check(note[j], j) == 0:        # Введенные данные не прошли проверку
                    note.pop(-1)        # Удаление из списка неправильно введенной строки
                    continue
            j += 1
        for i, j in enumerate(note_keys):
            note_states[j] = note[i]           # Внесение данных в словарь заметок
        if data_entry2(phrase[6]) == 1: e -= 1      # Запрос на удаление введенной заметки
        else:
            copy_ = note_states.copy()
            note_list.append(copy_)        # Внесение данных словаря в список словарей заметок
        note_states.clear()
        if data_entry2(phrase[7]) == 2:      # Запрос на добавление новой заметки
            break
        else:
            note.clear()      # Очистка списка ввода данных


def replace_dates(match_):       # Обработка любого ввода даты
    a = []        # Список вхождений даты в строке
    b = 0        # Временная переменная преобразования даты
    c = [
        '\\d{2}/\\d{2}/\\d{2,4}', '\\d{2}-\\d{2}-\\d{2,4}',
        '\\d{2}:\\d{2}:\\d{2,4}', '\\d{2}.\\d{2}.\\d{2,4}',
        '\\d{2,4}/\\d{2}/\\d{2}', '\\d{2,4}-\\d{2}-\\d{2}',
        '\\d{2,4}:\\d{2}:\\d{2}', '\\d{2,4}.\\d{2}.\\d{2}'
    ]           # Список шаблонов даты
    d = [
        '%d/%m/%Y', '%d-%m-%Y', '%d:%m:%Y',
        '%d.%m.%Y', '%Y/%m/%d', '%Y-%m-%d',
        '%Y:%m:%d', '%Y.%m.%d'
    ]        # Список форматов вывода даты
    for i, j in zip(c, d):     # Проверка ввода на наличие в строке даты
        try:
            a = re.findall(i, match_)       # Поиск в строке ввода даты по имеющимся в списке [c] шаблонам
            b = datetime.strptime(a[0], j)      # Преобразование вырезанной строки в тип datetime
            b = datetime.date(b)    # Преобразование datetime в date
            return b    # Выход из функции с аргументом date
        except:
            continue
    print(phrase[4])        # Вывод предупреждения об ошибке
    return 0


def check(string_, index_):     # Проверка вводимых данных
    counter = 0      # Счетчик заглавных букв
    if index_ in [4]:
        if string_ == "":       # Пустой ввод даты создания заметки
            note[index_] = str(date.today())       # Внесение в список текущей даты в строком выражении
            return
        else:
            note[index_] = str(replace_dates(note[index_]))     # Внесение в список даты в строковом выражении
            if note[index_] == "0": return 0    # Нужен повторный ввод
            return
    elif index_ in [5]:
        if string_ == "":
            note[index_] = str(
                date.today() + timedelta(weeks=1)
            )        # Дедлайн через неделю от сегодняшней даты по умолчанию (Enter)
            return
        note[index_] = replace_dates(note[index_])      # Проверка ввода даты и преобразование ее в тип datetime
        if note[index_] == 0: return 0      # Данные не прошли проверку. Выход из функции с аргументом 0
        if (note[index_] -
            replace_dates(note[index_ - 1])).days <= 0:     # Дата создания меньше или равна даты дедлайна!
            print(phrase[5])
            return 0
        else:
            note[index_] = str(note[index_])        # Внесение даты в словарь в виде строки
            return
    elif index_ == 3 and string_ not in status_:        # Проверка на вхождение строки в список статусов заметки
        if string_ == "":
            note[index_] = status_[0]
            return
        print(phrase[3])
        return 0
    elif index_ in [0, 1, 2]:       # Проверка на ввод имени заметки, заголовка и описания
        for ch in string_:
            if ch.isupper(): counter += 1        # Проверка на заглавную букву
            if counter in [0] and index_ in [0, 1, 2]:      # 0 заглавных букв - ошибка
                print(phrase[0])
                return 0
        if index_ == 1 and e > 0:      # Проверка заголовков на уникальность
            for i in range(e):
                if string_ == note_list[i][note_keys[1]]:
                    print(phrase[1])
                    return 0


def data_entry2(string_):
    while True:
        inp_ = input(string_)
        inp_ = check2(inp_)         # Проверка вводимых данных на ошибку
        if inp_ == 0:
            continue
        else:
            return inp_    # Возврат целого числа


def check2(string_):     # Проверка вводимых данных
    if string_ not in ["1", "2"]:       # Ввод отличается от 1 или 2
        print(phrase[8])
        return 0
    else:
        return int(string_)       # Возврат целого числа


def output(notes):       # Вывод заметок в виде столбца
    if len(notes) == 0:
        print("Заметки отсутствуют.")
    for l, _dict_ in enumerate(note_list):
        print((l + 1), '.', end="")      # Вывод номера заметки
        for i, res in enumerate(_dict_.keys()):
            print(f'{output_tab[i]}'    
                  f'{note_end[i]}'
                  f'{_dict_[res]}')     # Табулированный вывод заметок по образцу


# Программа "Менеджер заметок"
print(
    'Добро пожаловать в "Менеджер заметок"! '
    'Вы можете добавить новую заметку.'
)
print(
    "Вводите строки с заглавной буквы, "
    "а даты в любом числовом формате (10-10-2024 и т.п.):"
)
print('Список заметок:')
data_entry_()
output(note_list)